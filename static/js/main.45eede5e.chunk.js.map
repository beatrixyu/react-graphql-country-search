{"version":3,"sources":["graphql/get-countries.js","components/Country/CountryList.js","containers/CountriesContainer.js","containers/LanguageSearch.js","assets/logo.png","containers/Header.js","App.js","reportWebVitals.js","index.js"],"names":["GET_COUNTRIES","gql","CountryList","country","useState","languageCode","setLanguageCode","firstLanguage","secondLanguage","renderGoogle","useEffect","visibility","type","onClick","window","open","uri","console","log","className","name","emoji","capital","languages","slice","map","language","value","e","code","style","width","CountriesContainer","countries","LanguageSearch","useQuery","data","loading","error","searchLanguage","setSearchLanguage","filteredCountries","useMemo","lowerCaseSearch","toLocaleLowerCase","filter","reduce","p","match","message","handleSearch","a","preventDefault","onSubmit","onChange","target","placeholder","Header","href","src","logo","alt","App","client","ApolloClient","cache","InMemoryCache","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45eede5e.chunk.js","sourcesContent":["import gql from 'graphql-tag'\n\n export const GET_COUNTRIES = gql` \n   query countries($filter: CountryFilterInput) {\n     countries(filter : $filter) {\n         name\n         native\n         capital\n         emoji\n         languages{\n           code\n           name\n         }\n       }\n   }\n\n`\n\nexport const GET_LANGUAGES = gql` \nquery languages($filter: LanguageFilterInput) {\n  languages(filter: $filter) {\n        code\n        name\n      }\n}\n`\n\n// conntries can only filter code\n// languages can only filter code\n","import React, { useState, useEffect } from 'react';\n\nexport function CountryList({ country }) {\n\n    const [languageCode, setLanguageCode] = useState([])\n    const [firstLanguage, secondLanguage] = languageCode\n\n    const renderGoogle = useEffect( () => {\n\n        if ( ! languageCode ) return console.log(`languageCode ${languageCode}, 1.${firstLanguage}, 2.${secondLanguage}`)\n\n        if ( firstLanguage  && secondLanguage && firstLanguage !== secondLanguage) {\n            return <input\n                visibility='hidden'\n                type='button'\n                key={`${firstLanguage}-${secondLanguage}`}\n                onClick={window.open(uri, \"_blank\")}\n            />\n           }        \n    }\n    ,[ languageCode ] )\n   \n    const uri = `https://translate.google.com/?sl=${firstLanguage}&tl=${secondLanguage}&op=translate`\n\n\n    return (\n        <>\n        <ul className=\"country\">\n            <li className=\"country__name\">\n                <p>{country.name}</p>\n            </li>\n            <li className=\"country__emoji\">\n                <span>{country.emoji}</span>\n            </li>\n                {country.capital &&\n                    <li className=\"country__captial\">\n                    <span>{`Hauptstadt:  ${country.capital}`}</span>\n                </li>\n                } \n            <li className=\"country__languageButton\">\n                <div>                    \n                    <span>Sprache auswählen: <h6>Wählen Sie zwei Sprachen aus einer Länderkarte</h6></span>\n                    <i className=\"icon-chevron-down\"></i>\n                </div>\n            </li>\n            <li className=\"country__languages\">\n                {country.languages.slice(0, 4).map(language => (\n                    <span\n                        type='submit'\n                        value={languageCode}\n                        key={`${language.code}-${language.name}`}\n                        onClick={(e) => {\n                            setLanguageCode([language.code,...languageCode]);\n                            }}\n                        >\n                        {language.name}                  \n                    </span>\n                ))}\n            </li>\n        </ul>\n          { languageCode && <div style={{ visibility: 'hidden', width:'0px'}}>{renderGoogle}</div> }\n    </>\n    );\n}\n","import React from 'react';\nimport { CountryList } from '../components/Country/CountryList';\n\nexport function CountriesContainer({countries}) {\n    if ( ! countries.map ) return console.log(countries)\nreturn (\n<div>\n    <div className=\"container\">\n        { countries && countries.map(country => <CountryList key={country.name} country={country}/>)}\n    </div>\n</div> )}","import React, { useState, useMemo } from \"react\";\n\nimport { useQuery } from \"@apollo/client\";\nimport { GET_COUNTRIES } from \"../graphql/get-countries\";\n\nimport { CountriesContainer } from \"./CountriesContainer\";\n\nexport function LanguageSearch() {\n    const { data, loading, error } = useQuery(GET_COUNTRIES);\n    const [searchLanguage, setSearchLanguage] = useState(\"\");\n\n    const filteredCountries = useMemo( () => {\n        const lowerCaseSearch = searchLanguage.toLocaleLowerCase();\n        if ( ! data ) return [];\n        if ( ! searchLanguage ) return data.countries;\n        return data.countries.filter( country => \n            country.languages.reduce( (p,language) => p || language.name.toLocaleLowerCase().match(lowerCaseSearch), false)\n        )\n        }\n    , [ data, searchLanguage ] )\n\n\n    if ( loading || error ) {\n        return <p>{error ? error.message : \"Loading...\"}</p>;\n    }\n\n    if ( ! data ) return 'no data...'\n\n    const handleSearch = async (e) => {\n        e.preventDefault();\n    };\n\n    return (\n    <div className=\"search__container\">\n        <div className=\"bg__image\"></div>\n        <div className=\"search__left\"></div>\n        <div className=\"triangle\"></div>\n        <form className=\"search__form\" onSubmit={handleSearch}>\n            <input\n                className=\"search__input\"\n                type=\"text\"\n                value={searchLanguage}\n                    onChange={e => setSearchLanguage(e.target.value)}\n                    placeholder=\"Sprache\"\n            ></input>\n        </form>\n        <div className=\"languages__list\">\n            <CountriesContainer countries={filteredCountries}/>\n        </div>\n    </div>\n  );\n}","export default __webpack_public_path__ + \"static/media/logo.d6bafe88.png\";","import React from 'react';\nimport logo from '../assets/logo.png'\n\nexport const Header = () => {\n    return (\n      <main className=\"header\">\n            <a href=\"/\" className=\"image__container\"><img src={logo} alt=\"logo\"/></a>    \n        <div className=\"header__contact\">\n          <ul>\n            <li><a>Kundenservice</a></li>\n            <li><i className=\"far fa-user\"></i><a>Mein Kontakt</a></li>\n          </ul>\n        </div>\n        <div className=\"main__nav\">\n          <div className=\"menu__bar\"></div> \n          <ul className=\"menu__container\">\n            <li><span><a>Mitmachen</a></span> </li>\n            <li><span> <a>So funktioniert's</a></span> </li>\n            <li><span> <a>Gewinne</a></span> </li>\n            <li><span> <a>Ergebnisse</a></span> </li>\n            <li><span> <a>Projekte</a></span> </li>\n            <li><span> <a>Über uns</a></span> </li>\n           </ul>\n          <div className=\"menu__bar\"></div> \n        </div>\n      </main>\n  );\n};\n\n","import React from 'react';\n\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { InMemoryCache } from '@apollo/client';\nimport ApolloClient from 'apollo-boost';\n\nimport { LanguageSearch } from './containers/LanguageSearch'\nimport { Header } from './containers/Header'\n\nimport './styles/style.css'\n\nexport default function App() {\n\n  const client = new ApolloClient({\n    uri: 'https://countries.trevorblades.com/',\n    cache: new InMemoryCache()\n  });\n\n  return (\n    <ApolloProvider client={client}> \n      <Header/>\n      <LanguageSearch/> \n    </ApolloProvider>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}